{"ast":null,"code":"var _jsxFileName = \"/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/components/MessageInput.jsx\";\nimport React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport Keyboard from \"./KeyboardInput\";\nimport styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport templateBg from \"../assets/img/templateBg.png\";\n\nconst MessageInput = ({\n  writeStore\n}) => {\n  const handleClick = msg => {\n    writeStore.message = msg;\n  };\n\n  const messages = {\n    news: [\"Wat zijn de laatste nieuwtjes van jouw streek?\", \"Wat moet iedereen weten over jouw streek?\", \"Welke boodschap zou je graag delen met iedereen?\"],\n    nature: [\"Wat is het mooiste natuurplekje in jouw streek?\", \"Zou je liever meer of minder natuur in jouw streek zien?\", \"Woon je liever in de stad of op het platteland?\"],\n    technology: [\"Is jouw streek eerder ouderwets of modern?\", \"Wat is jouw favoriete stukje technologie?\", \"Hoelang zou jij zonder je smartphone kunnen\"],\n    culinary: [\"Wat is een typisch gerecht van jouw streek?\", \"Wat zou iedereen wel eens gegeten moeten hebben?\", \"Welk restaurant zou je aan iedereen aanraden?\"],\n    tourism: [\"Wat is uniek aan jouw streek?\", \"Beschrijf jouw streek in 3 woorden.\", \"Beschrijf de inwoners van jouw streek.\"],\n    art: [\"Kent jouw streek een bekende kunstenaar?\", \"Kent jouw streek een bekende muzikant?\", \"Beoefen jij een vorm van kunst?\"]\n  };\n  let input = writeStore.inputMethod;\n  return React.createElement(React.Fragment, null, React.createElement(InputChoice, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: input === \"templates\" ? \"contained\" : \"outlined\",\n    onClick: () => writeStore.handleChangeInput(\"templates\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"sjablonen\"), React.createElement(Button, {\n    variant: input === \"keyboard\" ? \"contained\" : \"outlined\",\n    onClick: () => writeStore.handleChangeInput(\"keyboard\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"eigen boodschap\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), input === \"templates\" ? React.createElement(MessageList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, messages[writeStore.theme].map(message => React.createElement(TemplateMessage, {\n    key: message,\n    onClick: () => handleClick(message),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, message))) : null, input === \"keyboard\" ? React.createElement(Keyboard, {\n    store: writeStore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }) : null);\n};\n\nconst TemplateMessage = styled.button`\n  border: none;\n  background-color: transparent;\n  background-image: url(${templateBg});\n  background-size: contain;\n  height: 6rem;\n`;\nconst MessageList = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst InputChoice = styled.div``;\nexport default inject(`writeStore`)(observer(MessageInput));","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/components/MessageInput.jsx"],"names":["React","inject","observer","Keyboard","styled","Button","templateBg","MessageInput","writeStore","handleClick","msg","message","messages","news","nature","technology","culinary","tourism","art","input","inputMethod","handleChangeInput","theme","map","TemplateMessage","button","MessageList","div","InputChoice"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACvC,QAAMC,WAAW,GAAGC,GAAG,IAAI;AACzBF,IAAAA,UAAU,CAACG,OAAX,GAAqBD,GAArB;AACD,GAFD;;AAIA,QAAME,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAE,CACJ,gDADI,EAEJ,2CAFI,EAGJ,kDAHI,CADS;AAMfC,IAAAA,MAAM,EAAE,CACN,iDADM,EAEN,0DAFM,EAGN,iDAHM,CANO;AAWfC,IAAAA,UAAU,EAAE,CACV,4CADU,EAEV,2CAFU,EAGV,6CAHU,CAXG;AAgBfC,IAAAA,QAAQ,EAAE,CACR,6CADQ,EAER,kDAFQ,EAGR,+CAHQ,CAhBK;AAqBfC,IAAAA,OAAO,EAAE,CACP,+BADO,EAEP,qCAFO,EAGP,wCAHO,CArBM;AA0BfC,IAAAA,GAAG,EAAE,CACH,0CADG,EAEH,wCAFG,EAGH,iCAHG;AA1BU,GAAjB;AAiCA,MAAIC,KAAK,GAAGX,UAAU,CAACY,WAAvB;AAEA,SACE,0CACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAED,KAAK,KAAK,WAAV,GAAwB,WAAxB,GAAsC,UADjD;AAEE,IAAA,OAAO,EAAE,MAAMX,UAAU,CAACa,iBAAX,CAA6B,WAA7B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAOE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEF,KAAK,KAAK,UAAV,GAAuB,WAAvB,GAAqC,UADhD;AAEE,IAAA,OAAO,EAAE,MAAMX,UAAU,CAACa,iBAAX,CAA6B,UAA7B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,CADF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,EAiBGF,KAAK,KAAK,WAAV,GACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QAAQ,CAACJ,UAAU,CAACc,KAAZ,CAAR,CAA2BC,GAA3B,CAA+BZ,OAAO,IACrC,oBAAC,eAAD;AAAiB,IAAA,GAAG,EAAEA,OAAtB;AAA+B,IAAA,OAAO,EAAE,MAAMF,WAAW,CAACE,OAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OADH,CADD,CADH,CADD,GAQG,IAzBN,EA0BGQ,KAAK,KAAK,UAAV,GAAuB,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEX,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvB,GAAyD,IA1B5D,CADF;AA8BD,CAtED;;AAwEA,MAAMgB,eAAe,GAAGpB,MAAM,CAACqB,MAAO;;;0BAGZnB,UAAW;;;CAHrC;AAQA,MAAMoB,WAAW,GAAGtB,MAAM,CAACuB,GAAI;;;CAA/B;AAKA,MAAMC,WAAW,GAAGxB,MAAM,CAACuB,GAAI,EAA/B;AAEA,eAAe1B,MAAM,CAAE,YAAF,CAAN,CAAqBC,QAAQ,CAACK,YAAD,CAA7B,CAAf","sourcesContent":["import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport Keyboard from \"./KeyboardInput\";\n\nimport styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\n\nimport templateBg from \"../assets/img/templateBg.png\";\n\nconst MessageInput = ({ writeStore }) => {\n  const handleClick = msg => {\n    writeStore.message = msg;\n  };\n\n  const messages = {\n    news: [\n      \"Wat zijn de laatste nieuwtjes van jouw streek?\",\n      \"Wat moet iedereen weten over jouw streek?\",\n      \"Welke boodschap zou je graag delen met iedereen?\"\n    ],\n    nature: [\n      \"Wat is het mooiste natuurplekje in jouw streek?\",\n      \"Zou je liever meer of minder natuur in jouw streek zien?\",\n      \"Woon je liever in de stad of op het platteland?\"\n    ],\n    technology: [\n      \"Is jouw streek eerder ouderwets of modern?\",\n      \"Wat is jouw favoriete stukje technologie?\",\n      \"Hoelang zou jij zonder je smartphone kunnen\"\n    ],\n    culinary: [\n      \"Wat is een typisch gerecht van jouw streek?\",\n      \"Wat zou iedereen wel eens gegeten moeten hebben?\",\n      \"Welk restaurant zou je aan iedereen aanraden?\"\n    ],\n    tourism: [\n      \"Wat is uniek aan jouw streek?\",\n      \"Beschrijf jouw streek in 3 woorden.\",\n      \"Beschrijf de inwoners van jouw streek.\"\n    ],\n    art: [\n      \"Kent jouw streek een bekende kunstenaar?\",\n      \"Kent jouw streek een bekende muzikant?\",\n      \"Beoefen jij een vorm van kunst?\"\n    ]\n  };\n\n  let input = writeStore.inputMethod;\n\n  return (\n    <>\n      <InputChoice>\n        <Button\n          variant={input === \"templates\" ? \"contained\" : \"outlined\"}\n          onClick={() => writeStore.handleChangeInput(\"templates\")}\n        >\n          sjablonen\n        </Button>\n        <Button\n          variant={input === \"keyboard\" ? \"contained\" : \"outlined\"}\n          onClick={() => writeStore.handleChangeInput(\"keyboard\")}\n        >\n          eigen boodschap\n        </Button>\n      </InputChoice>\n\n      <br />\n      {input === \"templates\" ? (\n        <MessageList>\n          {messages[writeStore.theme].map(message => (\n            <TemplateMessage key={message} onClick={() => handleClick(message)}>\n              {message}\n            </TemplateMessage>\n          ))}\n        </MessageList>\n      ) : null}\n      {input === \"keyboard\" ? <Keyboard store={writeStore} /> : null}\n    </>\n  );\n};\n\nconst TemplateMessage = styled.button`\n  border: none;\n  background-color: transparent;\n  background-image: url(${templateBg});\n  background-size: contain;\n  height: 6rem;\n`;\n\nconst MessageList = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst InputChoice = styled.div``;\n\nexport default inject(`writeStore`)(observer(MessageInput));\n"]},"metadata":{},"sourceType":"module"}