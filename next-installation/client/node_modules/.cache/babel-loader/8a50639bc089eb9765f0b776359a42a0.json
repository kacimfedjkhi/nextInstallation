{"ast":null,"code":"import { decorate, observable, action } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\"; //import { decorate, observable, action } from \"mobx\";\n\nclass WriteStore {\n  constructor(rootStore) {\n    this.activeStep = 0;\n    this.theme = \"\";\n    this.message = \"\";\n    this.uniqueId = \"\";\n    this.inputMethod = \"templates\";\n    this.cardFlipped = true;\n\n    this.setActiveStep = amount => {\n      switch (amount) {\n        case \"increase\":\n          return this.activeStep = this.activeStep + 1;\n\n        case \"decrease\":\n          return this.activeStep = this.activeStep - 1;\n\n        case \"reset\":\n          return this.activeStep = 0;\n\n        default:\n          return \"Unknown stepIndex\";\n      }\n    };\n\n    this.getStepTitle = stepIndex => {\n      switch (stepIndex) {\n        case 0:\n          return \"Welk thema spreekt je het meeste aan?\";\n\n        case 1:\n          return \"Wat zou je graag vertellen of vragen?\";\n\n        case 2:\n          return \"Is je kaartje klaar om te versturen?\";\n\n        case 3:\n          return \"Klaar! Uw kaartje wordt verstuurd\";\n\n        default:\n          return \"Unknown stepIndex\";\n      }\n    };\n\n    this.handleChangeInput = selectedInput => {\n      switch (selectedInput) {\n        case \"templates\":\n          this.inputMethod = selectedInput;\n          break;\n\n        case \"keyboard\":\n          console.log(selectedInput);\n          this.inputMethod = selectedInput;\n          break;\n\n        default:\n          return \"templates\";\n      }\n    };\n\n    this.handleFlipCard = () => {\n      if (!this.cardFlipped) {\n        this.cardFlipped = true;\n      } else {\n        this.cardFlipped = false;\n      }\n    };\n\n    this.sendCard = async data => {\n      const card = new Card(this.theme, this.message, [], [], this.uniqueId);\n      await this.rootStore.openStore.cards.push(card);\n      this.api.createCard(card);\n      console.log(this.socket);\n      this.socket.emit(`sendCard`, card);\n    };\n\n    this.rootStore = rootStore;\n    this.api = new Api(`card`);\n    this.socket = rootStore.uiStore.socket;\n  }\n\n}\n\ndecorate(WriteStore, {\n  activeStep: observable,\n  theme: observable,\n  message: observable,\n  inputMethod: observable,\n  cardFlipped: observable,\n  setActiveStep: action,\n  handleChangeInput: action,\n  handleFlipCard: action,\n  sendCard: action\n});\nexport default WriteStore;","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/store/WriteStore.js"],"names":["decorate","observable","action","Api","Card","WriteStore","constructor","rootStore","activeStep","theme","message","uniqueId","inputMethod","cardFlipped","setActiveStep","amount","getStepTitle","stepIndex","handleChangeInput","selectedInput","console","log","handleFlipCard","sendCard","data","card","openStore","cards","push","api","createCard","socket","emit","uiStore"],"mappings":"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","sourcesContent":["import { decorate, observable, action } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\n//import { decorate, observable, action } from \"mobx\";\n\nclass WriteStore {\n  activeStep = 0;\n  theme = \"\";\n  message = \"\";\n  uniqueId = \"\";\n\n  inputMethod = \"templates\";\n\n  cardFlipped = true;\n\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.api = new Api(`card`);\n    this.socket = rootStore.uiStore.socket;\n  }\n\n  setActiveStep = amount => {\n    switch (amount) {\n      case \"increase\":\n        return (this.activeStep = this.activeStep + 1);\n      case \"decrease\":\n        return (this.activeStep = this.activeStep - 1);\n      case \"reset\":\n        return (this.activeStep = 0);\n      default:\n        return \"Unknown stepIndex\";\n    }\n  };\n\n  getStepTitle = stepIndex => {\n    switch (stepIndex) {\n      case 0:\n        return \"Welk thema spreekt je het meeste aan?\";\n      case 1:\n        return \"Wat zou je graag vertellen of vragen?\";\n      case 2:\n        return \"Is je kaartje klaar om te versturen?\";\n      case 3:\n        return \"Klaar! Uw kaartje wordt verstuurd\";\n      default:\n        return \"Unknown stepIndex\";\n    }\n  };\n\n  handleChangeInput = selectedInput => {\n    switch (selectedInput) {\n      case \"templates\":\n        this.inputMethod = selectedInput;\n        break;\n      case \"keyboard\":\n        console.log(selectedInput);\n\n        this.inputMethod = selectedInput;\n        break;\n      default:\n        return \"templates\";\n    }\n  };\n\n  handleFlipCard = () => {\n    if (!this.cardFlipped) {\n      this.cardFlipped = true;\n    } else {\n      this.cardFlipped = false;\n    }\n  };\n\n  sendCard = async data => {\n    const card = new Card(this.theme, this.message, [], [], this.uniqueId);\n    await this.rootStore.openStore.cards.push(card);\n    this.api.createCard(card);\n    console.log(this.socket);\n\n    this.socket.emit(`sendCard`, card);\n  };\n}\n\ndecorate(WriteStore, {\n  activeStep: observable,\n  theme: observable,\n  message: observable,\n  inputMethod: observable,\n  cardFlipped: observable,\n  setActiveStep: action,\n  handleChangeInput: action,\n  handleFlipCard: action,\n  sendCard: action\n});\n\nexport default WriteStore;\n"]},"metadata":{},"sourceType":"module"}