{"ast":null,"code":"import { decorate, observable, action, runInAction } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\nclass OpenStore {\n  constructor(rootStore) {\n    this.cards = [];\n    this.selectedCard = \"LPcVmOdZ9\";\n    this.message = \"\";\n    this.answer = false;\n\n    this.getCards = () => {\n      this.api.getAllCards().then(newCards => {\n        if (newCards.length > 0) {\n          newCards.forEach(newCard => this._addCard(newCard));\n        }\n      });\n    };\n\n    this._addCard = values => {\n      const card = new Card(this.rootStore);\n      card.updateFromServer(values);\n      runInAction(() => this.cards.push(card));\n    };\n\n    this.addCard = card => {\n      //const card = new Card(this.rootStore);\n      this.cards.push(card);\n    };\n\n    this.showCard = () => {\n      const card = this.cards.filter(obj => {\n        return obj.uniqueId === this.selectedCard;\n      });\n      return card[0];\n    };\n\n    this.answerCard = id => {\n      const card = this.cards.filter(obj => {\n        return obj.id === id;\n      });\n      card[0].answers.push(this.message);\n      this.api.answerCard(card[0]);\n      this.socket.emit(`saveAnswer`, card);\n    };\n\n    this.rootStore = rootStore;\n    this.api = new Api(`cards`);\n    this.socket = rootStore.uiStore.socket;\n    this.getCards();\n    this.socket.on(`getCard`, this.addCard);\n  }\n\n}\n\ndecorate(OpenStore, {\n  cards: observable,\n  selectedCard: observable,\n  answer: observable,\n  message: observable,\n  getCards: action,\n  showCard: action\n});\nexport default OpenStore;","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/store/OpenStore.js"],"names":["decorate","observable","action","runInAction","Api","Card","OpenStore","constructor","rootStore","cards","selectedCard","message","answer","getCards","api","getAllCards","then","newCards","length","forEach","newCard","_addCard","values","card","updateFromServer","push","addCard","showCard","filter","obj","uniqueId","answerCard","id","answers","socket","emit","uiStore","on"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,MAA/B,EAAuCC,WAAvC,QAA0D,MAA1D;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,SAAN,CAAgB;AAMdC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SALvBC,KAKuB,GALf,EAKe;AAAA,SAJvBC,YAIuB,GAJR,WAIQ;AAAA,SAHvBC,OAGuB,GAHb,EAGa;AAAA,SAFvBC,MAEuB,GAFd,KAEc;;AAAA,SAQvBC,QARuB,GAQZ,MAAM;AACf,WAAKC,GAAL,CAASC,WAAT,GAAuBC,IAAvB,CAA4BC,QAAQ,IAAI;AACtC,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBD,UAAAA,QAAQ,CAACE,OAAT,CAAiBC,OAAO,IAAI,KAAKC,QAAL,CAAcD,OAAd,CAA5B;AACD;AACF,OAJD;AAKD,KAdsB;;AAAA,SAgBvBC,QAhBuB,GAgBZC,MAAM,IAAI;AACnB,YAAMC,IAAI,GAAG,IAAIlB,IAAJ,CAAS,KAAKG,SAAd,CAAb;AACAe,MAAAA,IAAI,CAACC,gBAAL,CAAsBF,MAAtB;AACAnB,MAAAA,WAAW,CAAC,MAAM,KAAKM,KAAL,CAAWgB,IAAX,CAAgBF,IAAhB,CAAP,CAAX;AACD,KApBsB;;AAAA,SAsBvBG,OAtBuB,GAsBbH,IAAI,IAAI;AAChB;AACA,WAAKd,KAAL,CAAWgB,IAAX,CAAgBF,IAAhB;AACD,KAzBsB;;AAAA,SA2BvBI,QA3BuB,GA2BZ,MAAM;AACf,YAAMJ,IAAI,GAAG,KAAKd,KAAL,CAAWmB,MAAX,CAAkBC,GAAG,IAAI;AACpC,eAAOA,GAAG,CAACC,QAAJ,KAAiB,KAAKpB,YAA7B;AACD,OAFY,CAAb;AAIA,aAAOa,IAAI,CAAC,CAAD,CAAX;AACD,KAjCsB;;AAAA,SAmCvBQ,UAnCuB,GAmCVC,EAAE,IAAI;AACjB,YAAMT,IAAI,GAAG,KAAKd,KAAL,CAAWmB,MAAX,CAAkBC,GAAG,IAAI;AACpC,eAAOA,GAAG,CAACG,EAAJ,KAAWA,EAAlB;AACD,OAFY,CAAb;AAIAT,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQU,OAAR,CAAgBR,IAAhB,CAAqB,KAAKd,OAA1B;AACA,WAAKG,GAAL,CAASiB,UAAT,CAAoBR,IAAI,CAAC,CAAD,CAAxB;AACA,WAAKW,MAAL,CAAYC,IAAZ,CAAkB,YAAlB,EAA+BZ,IAA/B;AACD,KA3CsB;;AACrB,SAAKf,SAAL,GAAiBA,SAAjB;AACA,SAAKM,GAAL,GAAW,IAAIV,GAAJ,CAAS,OAAT,CAAX;AACA,SAAK8B,MAAL,GAAc1B,SAAS,CAAC4B,OAAV,CAAkBF,MAAhC;AACA,SAAKrB,QAAL;AACA,SAAKqB,MAAL,CAAYG,EAAZ,CAAgB,SAAhB,EAA0B,KAAKX,OAA/B;AACD;;AAZa;;AAoDhB1B,QAAQ,CAACM,SAAD,EAAY;AAClBG,EAAAA,KAAK,EAAER,UADW;AAElBS,EAAAA,YAAY,EAAET,UAFI;AAGlBW,EAAAA,MAAM,EAAEX,UAHU;AAIlBU,EAAAA,OAAO,EAAEV,UAJS;AAKlBY,EAAAA,QAAQ,EAAEX,MALQ;AAMlByB,EAAAA,QAAQ,EAAEzB;AANQ,CAAZ,CAAR;AASA,eAAeI,SAAf","sourcesContent":["import { decorate, observable, action, runInAction } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\nclass OpenStore {\n  cards = [];\n  selectedCard = \"LPcVmOdZ9\";\n  message = \"\";\n  answer = false;\n\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.api = new Api(`cards`);\n    this.socket = rootStore.uiStore.socket;\n    this.getCards();\n    this.socket.on(`getCard`, this.addCard);\n  }\n\n  getCards = () => {\n    this.api.getAllCards().then(newCards => {\n      if (newCards.length > 0) {\n        newCards.forEach(newCard => this._addCard(newCard));\n      }\n    });\n  };\n\n  _addCard = values => {\n    const card = new Card(this.rootStore);\n    card.updateFromServer(values);\n    runInAction(() => this.cards.push(card));\n  };\n\n  addCard = card => {\n    //const card = new Card(this.rootStore);\n    this.cards.push(card);\n  };\n\n  showCard = () => {\n    const card = this.cards.filter(obj => {\n      return obj.uniqueId === this.selectedCard;\n    });\n\n    return card[0];\n  };\n\n  answerCard = id => {\n    const card = this.cards.filter(obj => {\n      return obj.id === id;\n    });\n\n    card[0].answers.push(this.message);\n    this.api.answerCard(card[0]);\n    this.socket.emit(`saveAnswer`, card);\n  };\n}\n\ndecorate(OpenStore, {\n  cards: observable,\n  selectedCard: observable,\n  answer: observable,\n  message: observable,\n  getCards: action,\n  showCard: action\n});\n\nexport default OpenStore;\n"]},"metadata":{},"sourceType":"module"}