{"ast":null,"code":"import { decorate, observable, action, runInAction } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\nclass OpenStore {\n  constructor(rootStore) {\n    this.cards = [];\n    this.selectedCard = \"LPcVmOdZ9\";\n    this.message = \"\";\n    this.answer = false;\n\n    this.updateCard = newData => {\n      console.log(\"test sokket update\", newData);\n      const card = this.cards.filter(obj => {\n        return obj.uniqueId === newData.uniqueId;\n      });\n      card[0].answers = newData.answers;\n    };\n\n    this.getCards = () => {\n      this.api.getAllCards().then(newCards => {\n        if (newCards.length > 0) {\n          newCards.forEach(newCard => this._addCard(newCard));\n        }\n      });\n    };\n\n    this._addCard = values => {\n      console.log(\"in add func\", values);\n      const card = new Card(this.rootStore);\n      card.updateFromServer(values);\n      runInAction(() => this.cards.push(card));\n    };\n\n    this.addCard = card => {\n      //const card = new Card(this.rootStore);\n      this.cards.push(card);\n    };\n\n    this.showCard = () => {\n      const card = this.cards.filter(obj => {\n        return obj.uniqueId === this.selectedCard;\n      });\n      return card[0];\n    };\n\n    this.answerCard = id => {\n      if (this.message !== \"\") {\n        const card = this.cards.filter(obj => {\n          return obj.id === id;\n        });\n        card[0].answers.push(this.message);\n\n        if (this.rootStore.uiStore.selectedLocation) {\n          card[0].locations.push(this.rootStore.uiStore.selectedLocation);\n        } else {\n          card[0].locations.push(\"unknown location\");\n        } //console.log(card[0]);\n\n\n        this.api.answerCard(card[0]);\n        this.socket.emit(`saveAnswer`, card[0]);\n        this.emptyValues();\n      }\n    };\n\n    this.emptyValues = () => {\n      this.message = \"\";\n    };\n\n    this.rootStore = rootStore;\n    this.api = new Api(`cards`);\n    this.socket = rootStore.uiStore.socket;\n    this.getCards();\n    this.socket.on(`getCard`, this._addCard);\n    this.socket.on(`updateCard`, this.updateCard);\n  }\n\n}\n\ndecorate(OpenStore, {\n  cards: observable,\n  selectedCard: observable,\n  answer: observable,\n  message: observable,\n  getCards: action,\n  showCard: action\n});\nexport default OpenStore;","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/store/OpenStore.js"],"names":["decorate","observable","action","runInAction","Api","Card","OpenStore","constructor","rootStore","cards","selectedCard","message","answer","updateCard","newData","console","log","card","filter","obj","uniqueId","answers","getCards","api","getAllCards","then","newCards","length","forEach","newCard","_addCard","values","updateFromServer","push","addCard","showCard","answerCard","id","uiStore","selectedLocation","locations","socket","emit","emptyValues","on"],"mappings":"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","sourcesContent":["import { decorate, observable, action, runInAction } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\nclass OpenStore {\n  cards = [];\n  selectedCard = \"LPcVmOdZ9\";\n  message = \"\";\n  answer = false;\n\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.api = new Api(`cards`);\n    this.socket = rootStore.uiStore.socket;\n    this.getCards();\n    this.socket.on(`getCard`, this._addCard);\n    this.socket.on(`updateCard`, this.updateCard);\n  }\n\n  updateCard = newData => {\n    console.log(\"test sokket update\", newData);\n\n    const card = this.cards.filter(obj => {\n      return obj.uniqueId === newData.uniqueId;\n    });\n\n    card[0].answers = newData.answers;\n  };\n\n  getCards = () => {\n    this.api.getAllCards().then(newCards => {\n      if (newCards.length > 0) {\n        newCards.forEach(newCard => this._addCard(newCard));\n      }\n    });\n  };\n\n  _addCard = values => {\n    console.log(\"in add func\", values);\n\n    const card = new Card(this.rootStore);\n    card.updateFromServer(values);\n    runInAction(() => this.cards.push(card));\n  };\n\n  addCard = card => {\n    //const card = new Card(this.rootStore);\n    this.cards.push(card);\n  };\n\n  showCard = () => {\n    const card = this.cards.filter(obj => {\n      return obj.uniqueId === this.selectedCard;\n    });\n\n    return card[0];\n  };\n\n  answerCard = id => {\n    if (this.message !== \"\") {\n      const card = this.cards.filter(obj => {\n        return obj.id === id;\n      });\n\n      card[0].answers.push(this.message);\n\n      if (this.rootStore.uiStore.selectedLocation) {\n        card[0].locations.push(this.rootStore.uiStore.selectedLocation);\n      } else {\n        card[0].locations.push(\"unknown location\");\n      }\n\n      //console.log(card[0]);\n\n      this.api.answerCard(card[0]);\n      this.socket.emit(`saveAnswer`, card[0]);\n      this.emptyValues();\n    }\n  };\n\n  emptyValues = () => {\n    this.message = \"\";\n  };\n}\n\ndecorate(OpenStore, {\n  cards: observable,\n  selectedCard: observable,\n  answer: observable,\n  message: observable,\n  getCards: action,\n  showCard: action\n});\n\nexport default OpenStore;\n"]},"metadata":{},"sourceType":"module"}