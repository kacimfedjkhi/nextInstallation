{"ast":null,"code":"import { decorate, observable, action, runInAction } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\nclass OpenStore {\n  constructor(rootStore) {\n    this.cards = [];\n\n    this.getCards = () => {\n      this.api.getAllCards().then(newCards => {\n        if (newCards.length > 0) {\n          newCards.forEach(newCard => this._addCard(newCard));\n        }\n      });\n    };\n\n    this._addCard = values => {\n      const card = new Card(this.rootStore);\n      card.updateFromServer(values);\n      runInAction(() => this.cards.push(card));\n    };\n\n    this.addCard = card => {\n      console.log(\"SOKKET TEST\", card);\n    };\n\n    this.rootStore = rootStore;\n    this.api = new Api(`cards`);\n    this.socket = rootStore.uiStore.socket;\n    this.getCards();\n    this.socket.on(`getCard`, this.addCard);\n  }\n\n}\n\ndecorate(OpenStore, {\n  cards: observable,\n  getCards: action\n});\nexport default OpenStore;","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/store/OpenStore.js"],"names":["decorate","observable","action","runInAction","Api","Card","OpenStore","constructor","rootStore","cards","getCards","api","getAllCards","then","newCards","length","forEach","newCard","_addCard","values","card","updateFromServer","push","addCard","console","log","socket","uiStore","on"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,MAA/B,EAAuCC,WAAvC,QAA0D,MAA1D;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,SAAN,CAAgB;AAGdC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAFvBC,KAEuB,GAFf,EAEe;;AAAA,SAQvBC,QARuB,GAQZ,MAAM;AACf,WAAKC,GAAL,CAASC,WAAT,GAAuBC,IAAvB,CAA4BC,QAAQ,IAAI;AACtC,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBD,UAAAA,QAAQ,CAACE,OAAT,CAAiBC,OAAO,IAAI,KAAKC,QAAL,CAAcD,OAAd,CAA5B;AACD;AACF,OAJD;AAKD,KAdsB;;AAAA,SAgBvBC,QAhBuB,GAgBZC,MAAM,IAAI;AACnB,YAAMC,IAAI,GAAG,IAAIf,IAAJ,CAAS,KAAKG,SAAd,CAAb;AACAY,MAAAA,IAAI,CAACC,gBAAL,CAAsBF,MAAtB;AACAhB,MAAAA,WAAW,CAAC,MAAM,KAAKM,KAAL,CAAWa,IAAX,CAAgBF,IAAhB,CAAP,CAAX;AACD,KApBsB;;AAAA,SAsBvBG,OAtBuB,GAsBbH,IAAI,IAAI;AAChBI,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,IAA3B;AACD,KAxBsB;;AACrB,SAAKZ,SAAL,GAAiBA,SAAjB;AACA,SAAKG,GAAL,GAAW,IAAIP,GAAJ,CAAS,OAAT,CAAX;AACA,SAAKsB,MAAL,GAAclB,SAAS,CAACmB,OAAV,CAAkBD,MAAhC;AACA,SAAKhB,QAAL;AACA,SAAKgB,MAAL,CAAYE,EAAZ,CAAgB,SAAhB,EAA0B,KAAKL,OAA/B;AACD;;AATa;;AA8BhBvB,QAAQ,CAACM,SAAD,EAAY;AAClBG,EAAAA,KAAK,EAAER,UADW;AAElBS,EAAAA,QAAQ,EAAER;AAFQ,CAAZ,CAAR;AAKA,eAAeI,SAAf","sourcesContent":["import { decorate, observable, action, runInAction } from \"mobx\";\nimport Api from \"../api/index\";\nimport Card from \"../models/Card\";\n\nclass OpenStore {\n  cards = [];\n\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.api = new Api(`cards`);\n    this.socket = rootStore.uiStore.socket;\n    this.getCards();\n    this.socket.on(`getCard`, this.addCard);\n  }\n\n  getCards = () => {\n    this.api.getAllCards().then(newCards => {\n      if (newCards.length > 0) {\n        newCards.forEach(newCard => this._addCard(newCard));\n      }\n    });\n  };\n\n  _addCard = values => {\n    const card = new Card(this.rootStore);\n    card.updateFromServer(values);\n    runInAction(() => this.cards.push(card));\n  };\n\n  addCard = card => {\n    console.log(\"SOKKET TEST\", card);\n  };\n}\n\ndecorate(OpenStore, {\n  cards: observable,\n  getCards: action\n});\n\nexport default OpenStore;\n"]},"metadata":{},"sourceType":"module"}