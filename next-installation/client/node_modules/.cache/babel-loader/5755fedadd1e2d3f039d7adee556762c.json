{"ast":null,"code":"import _slicedToArray from \"/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/components/KeyboardInput.jsx\";\nimport React, { useRef, useState } from \"react\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nconst Div = styled.div`\n  width: 50%;\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n`;\n\nconst KeyboardInput = ({\n  writeStore\n}) => {\n  const _useState = useState(\"default\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        layout = _useState2[0],\n        setLayout = _useState2[1];\n\n  const keyboard = useRef();\n\n  const onChange = input => {\n    writeStore.message = input;\n    console.log(\"Input changed\", input);\n  };\n\n  const handleShift = () => {\n    let newLayoutName = layout === \"default\" ? \"shift\" : \"default\";\n    setLayout(newLayoutName);\n  };\n\n  const onKeyPress = button => {\n    if (button === \"{shift}\" || button === \"{lock}\") handleShift();\n  };\n\n  return React.createElement(Div, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Keyboard, {\n    keyboardRef: r => keyboard.current = r,\n    layoutName: layout,\n    onChange: input => onChange(input),\n    onKeyPress: button => onKeyPress(button),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nexport default inject(`writeStore`)(observer(KeyboardInput));","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/components/KeyboardInput.jsx"],"names":["React","useRef","useState","Keyboard","styled","inject","observer","Div","div","KeyboardInput","writeStore","layout","setLayout","keyboard","onChange","input","message","console","log","handleShift","newLayoutName","onKeyPress","button","r","current"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,2CAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AAEA,MAAMC,GAAG,GAAGH,MAAM,CAACI,GAAI;;;;;CAAvB;;AAOA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAAA,oBACZR,QAAQ,CAAC,SAAD,CADI;AAAA;AAAA,QACjCS,MADiC;AAAA,QACzBC,SADyB;;AAExC,QAAMC,QAAQ,GAAGZ,MAAM,EAAvB;;AAEA,QAAMa,QAAQ,GAAGC,KAAK,IAAI;AACxBL,IAAAA,UAAU,CAACM,OAAX,GAAqBD,KAArB;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,KAA7B;AACD,GAJD;;AAMA,QAAMI,WAAW,GAAG,MAAM;AACxB,QAAIC,aAAa,GAAGT,MAAM,KAAK,SAAX,GAAuB,OAAvB,GAAiC,SAArD;AACAC,IAAAA,SAAS,CAACQ,aAAD,CAAT;AACD,GAHD;;AAKA,QAAMC,UAAU,GAAGC,MAAM,IAAI;AAC3B,QAAIA,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,QAAvC,EAAiDH,WAAW;AAC7D,GAFD;;AAIA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,WAAW,EAAEI,CAAC,IAAKV,QAAQ,CAACW,OAAT,GAAmBD,CADxC;AAEE,IAAA,UAAU,EAAEZ,MAFd;AAGE,IAAA,QAAQ,EAAEI,KAAK,IAAID,QAAQ,CAACC,KAAD,CAH7B;AAIE,IAAA,UAAU,EAAEO,MAAM,IAAID,UAAU,CAACC,MAAD,CAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAUD,CA7BD;;AA+BA,eAAejB,MAAM,CAAE,YAAF,CAAN,CAAqBC,QAAQ,CAACG,aAAD,CAA7B,CAAf","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\n\nconst Div = styled.div`\n  width: 50%;\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n`;\n\nconst KeyboardInput = ({ writeStore }) => {\n  const [layout, setLayout] = useState(\"default\");\n  const keyboard = useRef();\n\n  const onChange = input => {\n    writeStore.message = input;\n\n    console.log(\"Input changed\", input);\n  };\n\n  const handleShift = () => {\n    let newLayoutName = layout === \"default\" ? \"shift\" : \"default\";\n    setLayout(newLayoutName);\n  };\n\n  const onKeyPress = button => {\n    if (button === \"{shift}\" || button === \"{lock}\") handleShift();\n  };\n\n  return (\n    <Div>\n      <Keyboard\n        keyboardRef={r => (keyboard.current = r)}\n        layoutName={layout}\n        onChange={input => onChange(input)}\n        onKeyPress={button => onKeyPress(button)}\n      />\n    </Div>\n  );\n};\n\nexport default inject(`writeStore`)(observer(KeyboardInput));\n"]},"metadata":{},"sourceType":"module"}