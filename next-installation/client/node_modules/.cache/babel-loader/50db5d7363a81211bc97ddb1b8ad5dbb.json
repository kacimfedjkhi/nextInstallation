{"ast":null,"code":"import { decorate, observable, action } from \"mobx\";\nimport io from \"socket.io-client\";\n\nclass UIStore {\n  constructor(rootStore) {\n    this.selectedAction = \"\";\n    this.setupStep = 0;\n    this.adminLanguage = \"nl\";\n    this.userLanguage = \"nl\";\n    this.locationType = \"culture\";\n    this.selectedLocation = \"\";\n    this.event = false;\n    this.eventName = \"\";\n    this.modal = false;\n    this.socket = null;\n\n    this.connectSocket = () => {\n      let port;\n\n      if (window.location.hostname === `localhost` || window.location.hostname === `192.168.0.218`) {\n        port = `:4000`;\n      } else {\n        port = ``;\n      }\n\n      this.socket = io(`${window.location.protocol}//${window.location.hostname}${port}`);\n    };\n\n    this.setAdminLanguage = language => {\n      switch (language) {\n        case \"nl\":\n          this.adminLanguage = \"nl\";\n          console.log(language);\n          break;\n\n        case \"fr\":\n          this.adminLanguage = \"fr\";\n          break;\n\n        default:\n          return \"nl\";\n      }\n    };\n\n    this.setUserLanguage = language => {\n      switch (language) {\n        case \"nl\":\n          this.userLanguage = \"nl\";\n          console.log(language);\n          break;\n\n        case \"fr\":\n          this.userLanguage = \"fr\";\n          break;\n\n        default:\n          return \"nl\";\n      }\n    };\n\n    this.handleChangeLocation = value => {\n      console.log(value);\n      this.selectedLocation = value;\n    };\n\n    this.changeLocationType = value => {\n      this.locationType = value;\n    };\n\n    this.toggleCheckedEvent = e => {\n      if (!this.event) {\n        this.event = true;\n      } else {\n        this.event = false;\n      }\n    };\n\n    this.addEventName = value => {\n      this.eventName = value;\n    };\n\n    this.handleToggleModal = () => {\n      this.modal ? this.modal = false : this.modal = true;\n    };\n\n    this.rootStore = rootStore;\n    this.connectSocket();\n  }\n\n}\n\ndecorate(UIStore, {\n  adminLanguage: observable,\n  userLanguage: observable,\n  selectedLocation: observable,\n  locationType: observable,\n  event: observable,\n  eventName: observable,\n  selectedAction: observable,\n  modal: observable,\n  setAdminLanguage: action,\n  setUserLanguage: action,\n  changeLocationType: action,\n  toggleCheckedEvent: action,\n  addEventName: action\n});\nexport default UIStore;","map":{"version":3,"sources":["/Users/kacimfedjkhi/stack/BAP/DEV/installation/nextInstallation/next-installation/client/src/store/UIStore.js"],"names":["decorate","observable","action","io","UIStore","constructor","rootStore","selectedAction","setupStep","adminLanguage","userLanguage","locationType","selectedLocation","event","eventName","modal","socket","connectSocket","port","window","location","hostname","protocol","setAdminLanguage","language","console","log","setUserLanguage","handleChangeLocation","value","changeLocationType","toggleCheckedEvent","e","addEventName","handleToggleModal"],"mappings":"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","sourcesContent":["import { decorate, observable, action } from \"mobx\";\nimport io from \"socket.io-client\";\n\nclass UIStore {\n  selectedAction = \"\";\n  setupStep = 0;\n  adminLanguage = \"nl\";\n\n  userLanguage = \"nl\";\n  locationType = \"culture\";\n  selectedLocation = \"\";\n\n  event = false;\n  eventName = \"\";\n  modal = false;\n\n  socket = null;\n\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.connectSocket();\n  }\n\n  connectSocket = () => {\n    let port;\n    if (\n      window.location.hostname === `localhost` ||\n      window.location.hostname === `192.168.0.218`\n    ) {\n      port = `:4000`;\n    } else {\n      port = ``;\n    }\n\n    this.socket = io(\n      `${window.location.protocol}//${window.location.hostname}${port}`\n    );\n  };\n\n  setAdminLanguage = language => {\n    switch (language) {\n      case \"nl\":\n        this.adminLanguage = \"nl\";\n        console.log(language);\n\n        break;\n      case \"fr\":\n        this.adminLanguage = \"fr\";\n        break;\n      default:\n        return \"nl\";\n    }\n  };\n\n  setUserLanguage = language => {\n    switch (language) {\n      case \"nl\":\n        this.userLanguage = \"nl\";\n        console.log(language);\n\n        break;\n      case \"fr\":\n        this.userLanguage = \"fr\";\n        break;\n      default:\n        return \"nl\";\n    }\n  };\n\n  handleChangeLocation = value => {\n    console.log(value);\n\n    this.selectedLocation = value;\n  };\n\n  changeLocationType = value => {\n    this.locationType = value;\n  };\n\n  toggleCheckedEvent = e => {\n    if (!this.event) {\n      this.event = true;\n    } else {\n      this.event = false;\n    }\n  };\n\n  addEventName = value => {\n    this.eventName = value;\n  };\n\n  handleToggleModal = () => {\n    this.modal ? (this.modal = false) : (this.modal = true);\n  };\n}\n\ndecorate(UIStore, {\n  adminLanguage: observable,\n  userLanguage: observable,\n  selectedLocation: observable,\n  locationType: observable,\n  event: observable,\n  eventName: observable,\n  selectedAction: observable,\n  modal: observable,\n  setAdminLanguage: action,\n  setUserLanguage: action,\n  changeLocationType: action,\n  toggleCheckedEvent: action,\n  addEventName: action\n});\n\nexport default UIStore;\n"]},"metadata":{},"sourceType":"module"}